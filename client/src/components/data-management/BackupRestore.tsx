import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { useToast } from "@/hooks/use-toast";
import { localDB } from "@/lib/localStorageDb";
import { Download, Upload, Trash2, Database, Calendar } from "lucide-react";
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from "@/components/ui/alert-dialog";

export default function BackupRestore() {
  const [isImporting, setIsImporting] = useState(false);
  const { toast } = useToast();

  const handleExport = () => {
    try {
      const data = localDB.exportData();
      const blob = new Blob([data], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `cho-xanh-backup-${new Date().toISOString().split('T')[0]}.json`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
      toast({
        title: "Xu·∫•t d·ªØ li·ªáu th√†nh c√¥ng",
        description: "File backup ƒë√£ ƒë∆∞·ª£c t·∫£i xu·ªëng",
      });
    } catch (error) {
      toast({
        title: "L·ªói xu·∫•t d·ªØ li·ªáu",
        description: "Kh√¥ng th·ªÉ t·∫°o file backup",
        variant: "destructive",
      });
    }
  };

  const handleImport = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    setIsImporting(true);
    const reader = new FileReader();
    
    reader.onload = (e) => {
      try {
        const content = e.target?.result as string;
        const success = localDB.importData(content);
        
        if (success) {
          toast({
            title: "Nh·∫≠p d·ªØ li·ªáu th√†nh c√¥ng",
            description: "D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c kh√¥i ph·ª•c",
          });
          // Reload page to reflect changes
          window.location.reload();
        } else {
          toast({
            title: "L·ªói nh·∫≠p d·ªØ li·ªáu",
            description: "File backup kh√¥ng h·ª£p l·ªá",
            variant: "destructive",
          });
        }
      } catch (error) {
        toast({
          title: "L·ªói ƒë·ªçc file",
          description: "Kh√¥ng th·ªÉ ƒë·ªçc file backup",
          variant: "destructive",
        });
      } finally {
        setIsImporting(false);
        // Reset input
        event.target.value = '';
      }
    };
    
    reader.readAsText(file);
  };

  const handleClearData = () => {
    try {
      localDB.clearAllData();
      toast({
        title: "X√≥a d·ªØ li·ªáu th√†nh c√¥ng",
        description: "T·∫•t c·∫£ d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c x√≥a v√† kh·ªüi t·∫°o l·∫°i",
      });
      // Reload page to reflect changes
      window.location.reload();
    } catch (error) {
      toast({
        title: "L·ªói x√≥a d·ªØ li·ªáu",
        description: "Kh√¥ng th·ªÉ x√≥a d·ªØ li·ªáu",
        variant: "destructive",
      });
    }
  };

  const lastBackup = localDB.getLastBackupDate();
  const storageSize = localDB.getStorageSize();

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* Backup Section */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Download className="h-5 w-5" />
              Sao l∆∞u d·ªØ li·ªáu
            </CardTitle>
            <CardDescription>
              T·∫£i xu·ªëng t·∫•t c·∫£ d·ªØ li·ªáu th√†nh file JSON ƒë·ªÉ b·∫£o v·ªá th√¥ng tin
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="flex items-center justify-between text-sm">
              <span className="flex items-center gap-2">
                <Calendar className="h-4 w-4" />
                Sao l∆∞u g·∫ßn nh·∫•t:
              </span>
              <span className="font-medium">
                {lastBackup ? lastBackup.toLocaleString('vi-VN') : 'Ch∆∞a c√≥'}
              </span>
            </div>
            <div className="flex items-center justify-between text-sm">
              <span className="flex items-center gap-2">
                <Database className="h-4 w-4" />
                Dung l∆∞·ª£ng d·ªØ li·ªáu:
              </span>
              <span className="font-medium">{storageSize}</span>
            </div>
            <Button onClick={handleExport} className="w-full">
              <Download className="h-4 w-4 mr-2" />
              T·∫£i xu·ªëng backup
            </Button>
            <Button 
              onClick={() => {
                localDB.resetAdminPassword();
                toast({
                  title: "Reset m·∫≠t kh·∫©u admin th√†nh c√¥ng",
                  description: "Username: admin, Password: NoAdmin123",
                });
              }} 
              variant="outline" 
              className="w-full"
            >
              Reset m·∫≠t kh·∫©u admin
            </Button>
          </CardContent>
        </Card>

        {/* Restore Section */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Upload className="h-5 w-5" />
              Kh√¥i ph·ª•c d·ªØ li·ªáu
            </CardTitle>
            <CardDescription>
              T·∫£i l√™n file backup ƒë·ªÉ kh√¥i ph·ª•c d·ªØ li·ªáu ƒë√£ l∆∞u
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="backup-file">Ch·ªçn file backup</Label>
              <Input
                id="backup-file"
                type="file"
                accept=".json"
                onChange={handleImport}
                disabled={isImporting}
              />
            </div>
            <div className="text-sm text-muted-foreground">
              <p>‚ö†Ô∏è Thao t√°c n√†y s·∫Ω ghi ƒë√® to√†n b·ªô d·ªØ li·ªáu hi·ªán t·∫°i</p>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Danger Zone */}
      <Card className="border-destructive">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-destructive">
            <Trash2 className="h-5 w-5" />
            V√πng nguy hi·ªÉm
          </CardTitle>
          <CardDescription>
            C√°c thao t√°c n√†y kh√¥ng th·ªÉ ho√†n t√°c
          </CardDescription>
        </CardHeader>
        <CardContent>
          <AlertDialog>
            <AlertDialogTrigger asChild>
              <Button variant="destructive" className="w-full">
                <Trash2 className="h-4 w-4 mr-2" />
                X√≥a to√†n b·ªô d·ªØ li·ªáu
              </Button>
            </AlertDialogTrigger>
            <AlertDialogContent>
              <AlertDialogHeader>
                <AlertDialogTitle>B·∫°n c√≥ ch·∫Øc ch·∫Øn kh√¥ng?</AlertDialogTitle>
                <AlertDialogDescription>
                  Thao t√°c n√†y s·∫Ω x√≥a to√†n b·ªô d·ªØ li·ªáu bao g·ªìm:
                  <br />‚Ä¢ T·∫•t c·∫£ th√¥ng tin sinh vi√™n
                  <br />‚Ä¢ L·ªãch s·ª≠ giao d·ªãch
                  <br />‚Ä¢ Phi√™n ch·ª£
                  <br />‚Ä¢ T√†i kho·∫£n admin (tr·ª´ admin m·∫∑c ƒë·ªãnh)
                  <br /><br />
                  <strong>Thao t√°c n√†y kh√¥ng th·ªÉ ho√†n t√°c!</strong>
                </AlertDialogDescription>
              </AlertDialogHeader>
              <AlertDialogFooter>
                <AlertDialogCancel>H·ªßy</AlertDialogCancel>
                <AlertDialogAction 
                  onClick={handleClearData}
                  className="bg-destructive hover:bg-destructive/90"
                >
                  X√≥a to√†n b·ªô
                </AlertDialogAction>
              </AlertDialogFooter>
            </AlertDialogContent>
          </AlertDialog>
        </CardContent>
      </Card>

      {/* Instructions */}
      <Card>
        <CardHeader>
          <CardTitle>H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng</CardTitle>
        </CardHeader>
        <CardContent className="space-y-3">
          <div>
            <h4 className="font-medium text-sm">üì• Sao l∆∞u th∆∞·ªùng xuy√™n</h4>
            <p className="text-sm text-muted-foreground">
              T·∫£i xu·ªëng backup √≠t nh·∫•t 1 tu·∫ßn/l·∫ßn ƒë·ªÉ tr√°nh m·∫•t d·ªØ li·ªáu
            </p>
          </div>
          <div>
            <h4 className="font-medium text-sm">üíæ L∆∞u tr·ªØ an to√†n</h4>
            <p className="text-sm text-muted-foreground">
              L∆∞u file backup ·ªü nhi·ªÅu n∆°i: Google Drive, USB, email...
            </p>
          </div>
          <div>
            <h4 className="font-medium text-sm">üîÑ Kh√¥i ph·ª•c khi c·∫ßn</h4>
            <p className="text-sm text-muted-foreground">
              Ch·ªçn file backup v√† t·∫£i l√™n ƒë·ªÉ kh√¥i ph·ª•c d·ªØ li·ªáu khi c√≥ s·ª± c·ªë
            </p>
          </div>
          <div>
            <h4 className="font-medium text-sm">‚ö° D·ªØ li·ªáu t·ª± ƒë·ªông l∆∞u</h4>
            <p className="text-sm text-muted-foreground">
              M·ªçi thay ƒë·ªïi ƒë∆∞·ª£c l∆∞u ngay l·∫≠p t·ª©c trong tr√¨nh duy·ªát
            </p>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}